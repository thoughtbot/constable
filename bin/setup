#!/usr/bin/env sh

# Exit if any subcommand fails
set -e

# set up environment variables if not set up yet
if [ ! -f .env ]; then
  echo "Copying .env file"
  cp .sample.env .env
fi

# check if phantomjs is installed
if ! command -v phantomjs >/dev/null; then
  echo "You must install PhantomJS 2.x before continuing."
  exit 1
else
  phantomjs_version=$(phantomjs -v)
  major_version="${phantomjs_version%.*.*}"

  if ((major_version < 2)); then
    echo "Please update your PhantomJS to 2.x before continuing."
    exit 1
  fi
fi

echo "Removing previous build artifacts"
rm -rf deps _build

# Set up Elixir and Phoenix
if ! command -v mix >/dev/null; then
  echo "It looks like you don't have Elixir installed."
  echo "See http://elixir-lang.org/install.html for instructions."
  exit 1
fi

echo "Installing dependencies and compiling"
mix local.hex --force
mix deps.get
mix deps.compile
mix compile

# Set up database
echo "Setting up the database"
mix ecto.create
mix ecto.migrate
mix run priv/repo/seeds.exs

# Grab JS dependencies from NPM
echo "Installing npm dependencies"
cd assets && npm install && cd ../

# Only if this isn't CI
if [ -z "$CI" ]; then
  # Set up Heroku
  echo "Setting up Heroku and git remotes"
  heroku join --app constable-api-staging || true
  heroku git:remote -r staging -a constable-api-staging || true

  heroku join --app constable-api-production || true
  heroku git:remote -r production -a constable-api-production || true

  if ! grep -E -q 'CLIENT_ID |CLIENT_SECRET' .env; then
    heroku config --shell --remote staging | grep -E 'CLIENT_ID|CLIENT_SECRET' >> .env
  fi
fi
